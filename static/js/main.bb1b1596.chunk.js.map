{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Columns/Columns.js","components/Hero/Hero.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","handleOnClick","data-name","name","src","image","alt","Wrapper","children","Columns","Hero","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","gameOver","score","message","Component","App","legos","clicked","highscore","resetGame","currentScore","legosClicked","length","setState","sort","b","Math","random","event","console","log","target","currentLego","indexOf","concat","_this2","components_Wrapper_Wrapper","components_Hero_Hero","components_Columns_Columns","map","card","components_Card_Card","id","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4zDAceA,SAXF,SAAAC,GAAK,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,QAASL,EAAMM,cAAeC,YAAWP,EAAMQ,MACvEP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBACVH,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,MAAOC,IAAKX,EAAMQ,aCC3CI,SANC,SAAAZ,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACVJ,EAAMa,YCaAC,SAfC,SAAAd,GAAK,OACjBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,WAEnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACVJ,EAAMa,uBCuBZE,2BA5BX,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMnB,KACDuB,MAAQ,CACTC,UAAU,GAHCR,wEAOnB,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,uBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,+EAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,WAAkCe,KAAKnB,MAAMyB,MAA7C,KACAxB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,IAA2Be,KAAKnB,MAAM0B,QAAtC,iBAnBPC,cCyEJC,6MAlEXL,MAAQ,CACJM,QACAC,QAAS,GACTL,MAAO,EACPM,UAAW,EACXL,QAAS,MAGbM,UAAY,SAACC,EAAcC,GACvB,IAAIR,EAAU,GAEXA,EADCO,IAAiBJ,EAAMM,OACb,aAEiB,IAAjBF,EAAqB,wBAA0B,mBAE7DjB,EAAKoB,SAAS,CACVP,MAAOb,EAAKO,MAAMM,MAAMQ,KAAK,SAASnC,EAAGoC,GACrC,MAAO,GAAMC,KAAKC,WAEtBV,QAASI,EACTT,MAAOQ,EACPP,QAASA,OAGjBpB,cAAgB,SAAAmC,GAEZC,QAAQC,IAAIF,EAAMG,QAClB,IAAMC,EAAcJ,EAAMG,OAAOjC,IAKjC,GAHmBK,EAAKO,MAAMO,QACIgB,QAAQD,IAAgB,EAGtD7B,EAAKgB,UAAU,EAAG,QAEjB,CACD,IAAIE,EAAelB,EAAKO,MAAMO,QAAQiB,OAAOF,GAC7C7B,EAAKgB,UAAUhB,EAAKO,MAAME,MAAQ,EAAGS,GAGzCQ,QAAQC,IAAI3B,EAAKO,gFAIZ,IAAAyB,EAAA7B,KACL,OACIlB,EAAAC,EAAAC,cAAC8C,EAAD,KACIhD,EAAAC,EAAAC,cAAC+C,EAAD,CAAMzB,MAAON,KAAKI,MAAME,MAAOC,QAASP,KAAKI,MAAMG,UACnDzB,EAAAC,EAAAC,cAACgD,EAAD,KACKhC,KAAKI,MAAMM,MAAMuB,IAAI,SAAAC,GAAI,OACtBpD,EAAAC,EAAAC,cAACmD,EAAD,CAEIhD,cAAe0C,EAAK1C,cACpBiD,GAAIF,EAAKE,GACTC,IAAKH,EAAKE,GACV7C,MAAO2C,EAAK3C,MACZF,KAAM6C,EAAK7C,kBA1DrBmB,aCCE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bb1b1596.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n    <div className=\"column is-3\">\n        <div className=\"card\">\n            <div className=\"card-image\" onClick={props.handleOnClick} data-name={props.name}>\n                <figure className=\"image is-4by3\">\n                        <img src={props.image} alt={props.name} />\n                </figure>\n            </div>\n        </div>\n    </div>\n);\nexport default Card;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => (\n    <div className=\"main-app\">\n        {props.children}\n    </div>\n);\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Columns.css\";\n\nconst Columns = props => (\n    <section className=\"section\">\n\n    <div className=\"container\">\n        <div className=\"columns\">\n            <div className=\"column is-11 is-12-widescreen\">\n                <div className=\"columns is-multiline\">\n                    {props.children}\n                </div>\n            </div>\n        </div>\n    </div>\n    </section>\n);\n\nexport default Columns;\n","//sets up the reusable Hero component\nimport React, { Component } from \"react\";\nimport \"./Hero.css\";\n\nclass Hero extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameOver: false,\n        };\n    }\n  render() {\n    return (\n      <div className=\"hero is-small is-dark is-bold\">\n          <div className=\"hero-body\">\n              <div className=\"container\">\n                  <div className=\"columns is-vcentered\">\n                      <div className=\"column is-two-thirds\">\n                          <h1 className=\"title\"> Explore our Legos </h1>\n                          <h2 className=\"subtitle\"> Click on an image to earn points, but don't click on any more than once! </h2>\n                      </div>\n                      <div className=\"column is-two-thirds\">\n                          <h1 className=\"subtitle\">Score:  {this.props.score} </h1>\n                          <h2 className=\"subtitle\"> {this.props.message} </h2>\n                      </div>\n                  </div>\n              </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default Hero;\n\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Columns from \"./components/Columns\";\n// import Header from \"./components/Header\";\nimport legos from \"./legos.json\";\nimport \"./App.css\";\nimport Hero from \"./components/Hero\";\n\nclass App extends Component {\n    // Setting this.state.cards to the cards json array\n    state = {\n        legos,\n        clicked: [],\n        score: 0,\n        highscore: 0,\n        message: \"\"\n    };\n\n    resetGame = (currentScore, legosClicked ) => {\n        let message = \"\";\n        if (currentScore === legos.length){\n           message =  \"You Win!!!\"\n        }else{\n            message = currentScore === 0 ? \"Oh no... You Lost :( \" : \"You Got this! :D\"\n        }\n        this.setState({\n            legos: this.state.legos.sort(function(a, b) {\n                return 0.5 - Math.random();\n            }),\n            clicked: legosClicked,\n            score: currentScore,\n            message: message\n        });\n    }\n    handleOnClick = event => {\n\n        console.log(event.target)\n        const currentLego = event.target.alt;\n\n        let legosClicked = this.state.clicked;\n        let alreadyClicked = legosClicked.indexOf(currentLego) > -1;\n\n        if(alreadyClicked){\n            this.resetGame(0, [])\n\n        }else{\n            let legosClicked = this.state.clicked.concat(currentLego);\n            this.resetGame(this.state.score + 1, legosClicked)\n        }\n\n        console.log(this.state);\n    };\n\n    // Map over this.state.cards and render a cardCard component for each card object\n    render() {\n        return (\n            <Wrapper>\n                <Hero score={this.state.score} message={this.state.message} />\n                <Columns>\n                    {this.state.legos.map(card => (\n                        <Card\n                            // clickCount={this.clickCount}\n                            handleOnClick={this.handleOnClick}\n                            id={card.id}\n                            key={card.id}\n                            image={card.image}\n                            name={card.name}\n                        />\n                    ))}\n                </Columns>\n\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}